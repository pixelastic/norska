extends /_includes/_layouts/core

block meta
  - meta.title = "Conditionals"
  - 
    checkboxTests = [
      ['.bg-white.then_bg-green', '.bg-green.then_bg-white'],
      ['.block.bg-green.then_hidden', '.hidden.bg-white.then_block'],
    ]
    radioTests = [
      ['.then_bg-green', '.then_bg-blue', '.then_bg-orange.screenshot-click']
    ]


block content
  p It is possible to change styling dynamically through the use of the `.if` class and `then:` variant.
  p The `.if` class is added to a checkbox or radio element, and the `.then:` to another element in the page
  p The `.then:` style is only applied when the checkbox/radio is selected
  p If you hide the checkbox/radio and handle their state through linked labels, you can change some global state on your page and have elements react to it
  .screenshot.flcnw.mt-1
    each testCase, index in checkboxTests
      .fla.pr-1.pb-1
        input.hidden.if(type="checkbox" id=`checkbox${index}`)
        .bg-gray-2.flrnw.p-1
          .fln.flrnw.flc
            label.bg-blue.p-1.rounded.pointer.inline.white.text-3.screenshot-click(for=`checkbox${index}`) Click to toggle
          .fla.flrnw.flrcv.flspa
            each testClasses in testCase
              - const classesAsArray = testClasses.split('.')
              .fln.p-1.border-001.border-gray.shadow.rounded(class=classesAsArray)=testClasses

    each testCase, testIndex in radioTests
      .fla.pr-1.pb-1
        .bg-gray-2.flrnw.p-1
          each testClasses, radioIndex in testCase
            - const classesAsArray = testClasses.split('.')
            - const displayClasses = testClasses.replace('.screenshot-click', '');
            - const id = `radio-${testIndex}-${radioIndex}`
            .fla.flrnw.flc
              input.hidden.if(type="radio" name=`radio-${testIndex}` value=radioIndex id=id)
              label.fln.p-1.border-001.border-gray.shadow.rounded.pointer(class=classesAsArray for=id)=displayClasses

